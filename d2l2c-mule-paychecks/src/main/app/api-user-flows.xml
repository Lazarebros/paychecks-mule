<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

    <flow name="user-login-flow">
    	<logger message="Starting user login flow..." level="INFO" />
        <flow-ref name="select-user-by-username-flow" doc:name="select-user-by-username-flow" />
        <choice>
        	<when expression="#[flowVars.selectResultSet.size() &gt; 0]">
        		<transformer ref="contentToUserTransformer" />
        	</when>
        	<otherwise>
        		<set-payload value="{&quot;success&quot;: false, &quot;error_message&quot;: &quot;Login credentials are incorrect. Please try again!&quot;}" doc:name="Set Payload"/>
        	</otherwise>
        </choice>
        <exception-strategy ref="global-exception-handler" doc:name="global-exception-handler" />
    </flow>

    <flow name="user-registration-flow">
    	<logger message="Starting user registration flow..." level="INFO" />
    	
    	<set-variable variableName="firstName" value="#[new String(message.inboundAttachments.'first_name'.dataSource.content)]" doc:name="Variable" />
    	<set-variable variableName="lastName" value="#[new String(message.inboundAttachments.'last_name'.dataSource.content)]" doc:name="Variable" />
    	<set-variable variableName="userName" value="#[new String(message.inboundAttachments.'user_name'.dataSource.content)]" doc:name="Variable" />
    	<set-variable variableName="password" value="#[new String(message.inboundAttachments.'user_password'.dataSource.content)]" doc:name="Variable" />
    	<set-variable variableName="registrationCode" value="#[new String(message.inboundAttachments.'registration_code'.dataSource.content)]" doc:name="Variable" />
        
        <flow-ref name="select-user-by-username-flow" doc:name="select-user-by-username-flow" />
        <choice>
        	<when expression="#[flowVars.selectResultSet.size() &gt; 0]">
        		<logger message="User name already exist" level="INFO" />
        		<set-payload value="{&quot;SUCCESS&quot;: false, &quot;error_message&quot;: &quot;User name already exist. Please try with another user name!&quot;}" doc:name="Set Payload"/>
        	</when>
        	<otherwise>
		        <flow-ref name="check-registration-code-flow" doc:name="check-registration-code-flow" />
		        <choice>
		        	<when expression="#[flowVars.selectResultSet.size() &gt; 0]">
		        		<logger message="Registration code is valid!" level="INFO" />
		        		<flow-ref name="process_user-registration-flow" doc:name="process_user-registration-flow" />
		        	</when>
		        	<otherwise>
		        		<logger message="Registration code is not valid!" level="INFO" />
		        		<set-payload value="{&quot;success&quot;: false, &quot;error_message&quot;: &quot;Wrong registration code!&quot;}" doc:name="Set Payload"/>
		        	</otherwise>
		        </choice>
        	</otherwise>
        </choice>
        <exception-strategy ref="global-exception-handler" doc:name="global-exception-handler" />
    </flow>
    
    <sub-flow name="process_user-registration-flow">
        <flow-ref name="select-user-profile-flow" doc:name="select-user-profile-flow" />
        <choice>
        	<when expression="#[flowVars.selectResultSet.size() &gt; 0]">
        		<set-variable variableName="profileId" value="#[flowVars.selectResultSet.get(0).profile_id]" />
        		<logger message="User profile is valid: profile id: #[flowVars.profileId]" level="INFO" />
        		<flow-ref name="insert-user-flow" doc:name="insert-user-flow" />
        		<flow-ref name="insert-user-profile-flow" doc:name="insert-user-profile-flow" />
        		<set-payload value="{&quot;SUCCESS&quot;: true}" doc:name="Set Payload"/>
        	</when>
        	<otherwise>
        		<logger message="User profile is not valid!" level="INFO" />
        		<set-payload value="{&quot;success&quot;: false, &quot;error_message&quot;: &quot;User profile is not valid!&quot;}" doc:name="Set Payload"/>
        	</otherwise>
        </choice>
    </sub-flow>
    
    <sub-flow name="select-user-profile-flow">
        <db:select config-ref="Paychecks_Database_Configuration" target="#[flowVars.selectResultSet]" doc:name="Database">
        	<db:parameterized-query><![CDATA[
            	SELECT 
            	profile.profile_id AS profile_id
            	FROM user_profiles AS profile
            	WHERE profile.type = :type
            	]]>
            </db:parameterized-query>
            <db:in-param name="type" value="#['USER']" type="VARCHAR" />
        </db:select>
    </sub-flow>
    
    <sub-flow name="select-user-by-username-flow">
        <db:select config-ref="Paychecks_Database_Configuration" target="#[flowVars.selectResultSet]" doc:name="Database">
        	<db:parameterized-query><![CDATA[
            	SELECT 
            	user.user_id AS id, 
            	user.user_uid AS user_uid, 
            	user.user_name AS user_name, 
            	user.password AS password, 
            	user.first_name AS first_name, 
            	user.last_name AS last_name, 
            	user.date_created AS date_created, 
            	user.date_updated AS date_updated, 
            	user.enabled AS enabled
            	FROM users AS user
            	WHERE user.user_name = :userName
            	]]>
            </db:parameterized-query>
            <db:in-param name="userName" value="#[flowVars.userName]" type="VARCHAR" />
        </db:select>
    </sub-flow>
    
    <sub-flow name="check-registration-code-flow">
        <db:select config-ref="Paychecks_Database_Configuration" target="#[flowVars.selectResultSet]" doc:name="Database">
        	<db:parameterized-query><![CDATA[
            	SELECT 
            	registration.first_name AS first_name, 
            	registration.last_name AS last_name, 
            	registration.code AS code
            	FROM user_registrations AS registration
            	WHERE registration.first_name = :firstName
            	AND registration.last_name = :lastName
            	AND registration.code = :code
            	]]>
            </db:parameterized-query>
            <db:in-param name="firstName" value="#[flowVars.firstName.toLowerCase()]" type="VARCHAR" />
            <db:in-param name="lastName" value="#[flowVars.lastName.toLowerCase()]" type="VARCHAR" />
            <db:in-param name="code" value="#[flowVars.registrationCode]" type="VARCHAR" />
        </db:select>
    </sub-flow>
    
    <sub-flow name="insert-user-flow">
        <db:insert config-ref="Paychecks_Database_Configuration" target="#[flowVars.selectResultSet]" doc:name="Database">
        	<db:parameterized-query><![CDATA[
            	INSERT INTO users(
            		user_uid, 
            		user_name, 
            		password, 
            		first_name, 
            		last_name, 
            		enabled
            	) VALUES (
            		:userUID, 
            		:userName, 
            		:password, 
            		:firstName, 
            		:lastName, 
            		:enabled
            	)
            	]]>
            </db:parameterized-query>
            <db:in-param name="userUID" value="#[message.id.toString()]" type="VARCHAR" />
            <db:in-param name="userName" value="#[flowVars.userName]" type="VARCHAR" />
            <db:in-param name="password" value="#[encodePassword(flowVars.password)]" type="VARCHAR" />
            <db:in-param name="firstName" value="#[flowVars.firstName]" type="VARCHAR" />
            <db:in-param name="lastName" value="#[flowVars.lastName]" type="VARCHAR" />
            <db:in-param name="enabled" value="#[1]" type="CHAR" />
        </db:insert>
    </sub-flow>
    
    <sub-flow name="insert-user-profile-flow">
        <db:insert config-ref="Paychecks_Database_Configuration" target="#[flowVars.selectResultSet]" doc:name="Database">
        	<db:parameterized-query><![CDATA[
            	INSERT INTO users_user_profiles (
            		user_id, 
            		profile_id
            	)
	  			SELECT user.user_id, 
	  			profile.profile_id 
	  			FROM users user, user_profiles profile
				WHERE user.user_name =:userName AND profile.profile_id =:profileId 
            	]]>
            </db:parameterized-query>
            <db:in-param name="userName" value="#[flowVars.userName]" type="VARCHAR" />
            <db:in-param name="profileId" value="#[flowVars.profileId]" type="BIGINT" />
        </db:insert>
    </sub-flow>

</mule>
